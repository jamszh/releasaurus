"use strict";(self.webpackChunkreleasaurus=self.webpackChunkreleasaurus||[]).push([[780],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(r),g=a,m=p["".concat(u,".").concat(g)]||p[g]||h[g]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=g;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2863:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={title:"Attaching a Github Repo",sidebar_position:2},o=void 0,s={unversionedId:"Releasaurus/attaching-a-github-repo",id:"Releasaurus/attaching-a-github-repo",title:"Attaching a Github Repo",description:"Prerequisites",source:"@site/docs/Releasaurus/attaching-a-github-repo.mdx",sourceDirName:"Releasaurus",slug:"/Releasaurus/attaching-a-github-repo",permalink:"/releasaurus/docs/Releasaurus/attaching-a-github-repo",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Attaching a Github Repo",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Setting up Releasaurus",permalink:"/releasaurus/docs/Releasaurus/setting-up-releasaurus"},next:{title:"Automating a CHANGELOG",permalink:"/releasaurus/docs/Releasaurus/automating-a-changelog"}},u={},l=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Adding a Github Workflow Action",id:"adding-a-github-workflow-action",level:3},{value:"What is this doing? TL;DR",id:"what-is-this-doing-tldr",level:3}],c={toc:l},p="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Releasaurus is all setup"),(0,a.kt)("li",{parentName:"ul"},"The repository you want to attach is already automatically generating releases.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If not, see how to ",(0,a.kt)("a",{parentName:"li",href:"automating-a-changelog"},"automate the CHANGELOG generation"))))),(0,a.kt)("h3",{id:"adding-a-github-workflow-action"},"Adding a Github Workflow Action"),(0,a.kt)("p",null,"Simply add this file to the project you want to attach."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/releasaurus"',title:'".github/workflows/releasaurus"'},'name: releasaurus\n\non:\n  release:\n    types: [published]\n\njobs:\n  releasaurus:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        repository: "jamzsh/releasaurus" # Update with your own fork\n        token: ${{ secrets.PAT }}\n    - name: create-branch\n      run: |\n        git config user.name "github-actions[bot]"\n        git config user.email "github-actions[bot]@users.noreply.github.com"\n        git checkout -b ${{ github.event.repository.name }}\n        yarn install\n        yarn notes-please create -a ${{ secrets.PAT }} -r ${{ github.repository }} -p releases/${{ github.event.repository.name }}\n        git add releases/${{ github.event.repository.name }}/${{ github.event.release.tag_name }}-${{ github.event.repository.name }}.mdx\n        git commit -m "Release notes for ${{ github.event.release.tag_name }}-${{ github.event.repository.name }}"\n        git push -u origin ${{ github.event.repository.name }}\n    - name: pull-request\n      uses: repo-sync/pull-request@v2\n      with:\n        pr_title: "Release notes for ${{ github.event.release.tag_name }}-${{ github.event.repository.name }}"\n        pr_body: |\n          Release notes for Releasaurus\n          I\'m a :robot:\n        source_branch: ${{ github.event.repository.name }}\n        destination_branch: "main"\n        github_token: ${{ secrets.PAT }}\n        destination_repository: "jamzsh/releasaurus" # Update with your own fork\n')),(0,a.kt)("h3",{id:"what-is-this-doing-tldr"},"What is this doing? TL;DR"),(0,a.kt)("p",null,"Whenever there is a new release, this Github action will checkout the latest version of your forked Releasaurus and pull the information of the latest release and create a PR."))}h.isMDXComponent=!0}}]);